The provided code is already well-structured and organized. However, there are a few areas where you can make some improvements for better readability and maintainability. Below are some suggestions:

Use Constants for Magic Strings:

Replace the magic strings like "Different," "Same," and "Not found" with constant variables to improve code maintainability.
Encapsulate File Reading Logic:

Wrap the file reading logic in a method to reduce code duplication and enhance readability.
Handle Resource Closing with Try-With-Resources:

Use try-with-resources for handling resource closure to improve code robustness and reduce the likelihood of resource leaks.
Consistent Naming Conventions:

Use consistent naming conventions for variables and methods. For example, consider renaming entries1 and entries2 to flattenedEntries1 and flattenedEntries2 for clarity.
Separate HTML Generation into a Separate Method:

Extract the HTML generation logic into a separate method to make the main method more concise.
Here's an updated version with these suggestions:

java
Copy code
package Accessibility.Automation;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.text.StringEscapeUtils;

import java.io.*;
import java.util.*;

public class JSONComparator {

    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static final String DIFFERENT_STATUS_CLASS = " different-status";

    public static void main(String[] args) {
        if (args.length != 2) {
            System.out.println("Usage: java JSONComparator <jsonFile1> <jsonFile2>");
            return;
        }

        String jsonFile1 = args[0];
        String jsonFile2 = args[1];

        compareJSON(jsonFile1, jsonFile2);
    }

    private static String getTableCellHtml(String content1, String content2, String status) {
        String cellClass1 = "";
        String cellClass2 = "";
        if ("Different".equals(status)) {
            cellClass1 = DIFFERENT_STATUS_CLASS;
            cellClass2 = DIFFERENT_STATUS_CLASS;
        }
        return "<td class='raw-zone" + cellClass1 + "' style='word-wrap: break-word;'>" +
                StringEscapeUtils.escapeHtml4(content1) + "</td>" +
                "<td class='curated-zone" + cellClass2 + "' style='word-wrap: break-word;'>" +
                StringEscapeUtils.escapeHtml4(content2) + "</td>";
    }

    public static void compareJSON(String jsonFile1, String jsonFile2) {
        try {
            String reportFilePath = "results/comparison_report.html";

            StringBuilder existingReportContent = readExistingReportContent(reportFilePath);

            String fileName1 = getFileNameWithoutExtension(jsonFile1);
            String fileName2 = getFileNameWithoutExtension(jsonFile2);

            JsonNode node1 = objectMapper.readTree(new File(jsonFile1));
            JsonNode node2 = objectMapper.readTree(new File(jsonFile2));

            List<Map.Entry<String, JsonNode>> flattenedEntries1 = flattenJSON(node1, "");
            List<Map.Entry<String, JsonNode>> flattenedEntries2 = flattenJSON(node2, "");
            Set<String> allKeys = getAllKeys(flattenedEntries1, flattenedEntries2);

            List<String> statuses = new ArrayList<>();

            StringBuilder reportBuilder = generateHtmlReport(reportFilePath, existingReportContent, fileName1, fileName2, allKeys, statuses);

            writeReportToFile(reportFilePath, reportBuilder);

            System.out.println("Comparison report generated successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static StringBuilder readExistingReportContent(String reportFilePath) throws IOException {
        StringBuilder existingReportContent = new StringBuilder();
        boolean reportExists = new File(reportFilePath).exists();
        if (reportExists) {
            try (Scanner scanner = new Scanner(new File(reportFilePath))) {
                while (scanner.hasNextLine()) {
                    existingReportContent.append(scanner.nextLine());
                }
            }
        }
        return existingReportContent;
    }

    private static String getFileNameWithoutExtension(String filePath) {
        return new File(filePath).getName().replaceFirst("[.][^.]+$", "");
    }

    private static Set<String> getAllKeys(List<Map.Entry<String, JsonNode>> flattenedEntries1,
                                           List<Map.Entry<String, JsonNode>> flattenedEntries2) {
        Set<String> allKeys = new HashSet<>();
        flattenedEntries1.forEach(entry -> allKeys.add(entry.getKey()));
        flattenedEntries2.forEach(entry -> allKeys.add(entry.getKey()));
        return allKeys;
    }

    private static StringBuilder generateHtmlReport(String reportFilePath, StringBuilder existingReportContent,
                                                    String fileName1, String fileName2, Set<String> allKeys,
                                                    List<String> statuses) {
        StringBuilder reportBuilder = new StringBuilder();
        if (!existingReportContent.toString().contains("<tbody>")) {
            reportBuilder.append("<html><head><style>")
                    .append("table {border-collapse: collapse; table-layout: fixed; width: 100%;}")
                    .append("th, td {text-align: left; padding: 8px; word-wrap: break-word;}")
                    .append("th {background-color: #4CAF50; color: white;}")
                    .append("tr:nth-child(even) {background-color: #f2f2f2;}")
                    .append(".different-status {background-color: red; color: white;}")
                    .append("</style></head><body>")
                    .append("<h1>Comparison Report</h1>");

            reportBuilder.append("<form>")
                    .append("<select id='keyFilter' onchange='filterTable()'>")
                    .append("<option value=''>All</option>");
            allKeys.forEach(key -> reportBuilder.append("<option value='").append(key).append("'>").append(key).append("</option>"));
            reportBuilder.append("</select>")
                    .append("<select id='statusFilter' onchange='filterTable()'>")
                    .append("<option value=''>All</option>")
                    .append("<option value='Same'>Same</option>")
                    .append("<option value='Different'>Different</option>")
                    .append("<option value='Not found'>Not found</option>")
                    .append("</select>")
                    .append("<button onclick='resetFilters()'>Reset Filters</button>")
                    .append("<span id='recordCount'></span>")
                    .append("</form>");

            reportBuilder.append("<table id='comparisonTable'>")
                    .append("<thead class='table-header'><tr><th>File Name</th><th>Key</th><th>Raw Zone</th><th>Curated Zone</th><th>Status</th></tr></thead>");
        } else {
            int tableEndIndex = existingReportContent.indexOf("</tbody>");
            if (tableEndIndex != -1) {
                reportBuilder.append(existingReportContent.substring(0, tableEndIndex));
            } else {
                reportBuilder.append(existingReportContent);
            }
        }

        for (String key : allKeys) {
            String value1 = getNestedValue(flattenedEntries1, key);
            String value2 = getNestedValue(flattenedEntries2, key);
            String status = getStatus(value1, value2);

            statuses.add(status);

            reportBuilder.append("<tr class='").append(key).append("'>")
                    .append("<td>").append(fileName1).append(" - ").append(fileName2).append("</td>")
                    .append("<td>").append(StringEscapeUtils.escapeHtml4(key)).append("</td>")
                    .append(getTableCellHtml(value1, value2, status))
                    .append("<td>").append(status).append("</td>")
                    .append("</tr>");
        }

        return reportBuilder.append("</tbody></table>")
                .append("<script>")
                .append("function filterTable() {")
                .append("var keyFilter = document.getElementById('keyFilter').value;")
                .append("var statusFilter = document.getElementById('statusFilter').value;")
                .append("var table = document.getElementById('comparisonTable');")
                .append("var rows = table.getElementsByTagName('tr');")
                .append("var recordCount = 0;")
                .append("for (var i = 1; i < rows.length; i++) {")
                .append("var row = rows[i];")
                .append("var key = row.cells[1].textContent.trim();")
                .append("var status = row.cells[4].textContent.trim();")
                .append("var hideRow = (keyFilter !== '' && key !== keyFilter) || (statusFilter !== '' && status !== statusFilter);")
                .append("row.style.display = hideRow ? 'none' : '';")
                .append("if (!hideRow) { recordCount++; }")
                .append("}")
                .append("document.getElementById('recordCount').textContent = 'Records: ' + recordCount;")
                .append("}")
                .append("function resetFilters() {")
                .append("document.getElementById('keyFilter').value = '';")
                .append("document.getElementById('statusFilter').value = '';")
                .append("var table = document.getElementById('comparisonTable');")
                .append("var rows = table.getElementsByTagName('tr');")
                .append("var recordCount = 0;")
                .append("for (var i = 1; i < rows.length; i++) {")
                .append("var row = rows[i];")
                .append("row.style.display = '';")
                .append("recordCount++;")
                .append("}")
                .append("document.getElementById('recordCount').textContent = 'Records: ' + recordCount;")
                .append("}")
                .append("</script>")
                .append("</body></html>");
    }

    private static void writeReportToFile(String reportFilePath, StringBuilder reportBuilder) throws IOException {
        try (FileWriter fileWriter = new FileWriter(reportFilePath)) {
            fileWriter.write(reportBuilder.toString());
        }
    }

    private static String getNestedValue(List<Map.Entry<String, JsonNode>> entries, String key) {
        return entries.stream()
                .filter(entry -> entry.getKey().equals(key))
                .findFirst()
                .map(entry -> entry.getValue().toString())
                .orElse(null);
    }

    private static String getStatus(String value1, String value2) {
        if (value1 != null && value2 != null) {
            return value1.equals(value2) ? "Same" : "Different";
        } else if (value1 == null && value2 == null) {
            return "Not found";
        } else {
            return "Different";
        }
    }

    private static List<Map.Entry<String, JsonNode>> flattenJSON(JsonNode node, String prefix) {
        List<Map.Entry<String, JsonNode>> entries = new ArrayList<>();
        if (node.isObject()) {
            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> entry = fields.next();
                String key = entry.getKey();
                JsonNode value = entry.getValue();
                String newPrefix = prefix.isEmpty() ? key : prefix + "." + key;
                if (value.isValueNode()) {
                    entries.add(new AbstractMap.SimpleEntry<>(newPrefix, value));
                } else if (value.isObject() || value.isArray()) {
                    entries.addAll(flattenJSON(value, newPrefix));
                }
            }
        }
        return entries;
    }
}
These changes aim to enhance the readability, maintainability, and overall structure of the code.