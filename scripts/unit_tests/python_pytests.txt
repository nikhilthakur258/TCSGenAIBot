import pytest
from selenium import webdriver

@pytest.fixture
def browser():
    driver = webdriver.Chrome()
    yield driver
    driver.quit()

def test_signed_in_users_capacity(browser):
    # Given a user opens https://www.example.com using Chrome
    browser.get("https://www.example.com")

    # And the user clicks on "Upload Files"
    browser.find_element_by_link_text("Upload Files").click()

    # And the page reloads
    # Assuming the page reloads automatically after clicking "Upload Files"

    # And the user clicks on "Spreadsheet Formats"
    browser.find_element_by_link_text("Spreadsheet Formats").click()

    # Then the buttons "XLS" and "XLSX" show
    assert browser.find_element_by_id("xls_button").is_displayed()
    assert browser.find_element_by_id("xlsx_button").is_displayed()

    # And the user clicks on "XLSX"
    browser.find_element_by_id("xlsx_button").click()

    # And the user selects "500kb-sheet.xlsx"
    browser.find_element_by_id("file_input").send_keys("path/to/500kb-sheet.xlsx")

    # Then the upload completes
    # Assuming there is a success message or element to verify the upload completion
    assert browser.find_element_by_id("upload_success_message").is_displayed()

    # And the table "Uploaded Files" contains a cell with "500kb-sheet.xlsx"
    uploaded_files_table = browser.find_element_by_id("uploaded_files_table")
    assert "500kb-sheet.xlsx" in uploaded_files_table.text

    # And the user clicks on "XLSX"
    browser.find_element_by_id("xlsx_button").click()

    # And the user selects "1mb-sheet.xlsx"
    browser.find_element_by_id("file_input").send_keys("path/to/1mb-sheet.xlsx")

    # Then the upload fails
    # Assuming there is an error message or element to verify the upload failure
    assert browser.find_element_by_id("upload_error_message").is_displayed()

    # And the table "Uploaded Files" does not contain a cell with "1mb-sheet.xlsx"
    assert "1mb-sheet.xlsx" not in uploaded_files_table.text

    # And the user clicks on "Login"
    browser.find_element_by_link_text("Login").click()

    # And the user enters "testuser123" into the "username" field
    browser.find_element_by_id("username_input").send_keys("testuser123")

    # And the user enters "$Pass123" into the "password" field
    browser.find_element_by_id("password_input").send_keys("$Pass123")

    # And the user clicks on "Sign in"
    browser.find_element_by_id("signin_button").click()

    # And the page reloads
    # Assuming the page reloads automatically after successful login

    # Then the table "Uploaded Files" contains a cell with "500kb-sheet.xlsx"
    assert "500kb-sheet.xlsx" in uploaded_files_table.text

    # And the table "Uploaded Files" does not contain a cell with "1mb-sheet.xlsx"
    assert "1mb-sheet.xlsx" not in uploaded_files_table.text

    # And the user clicks on "spreadsheet formats"
    browser.find_element_by_link_text("spreadsheet formats").click()

    # Then the buttons "XLS" and "XLSX" show
    assert browser.find_element_by_id("xls_button").is_displayed()
    assert browser.find_element_by_id("xlsx_button").is_displayed()

    # And the user clicks on "XLSX"
    browser.find_element_by_id("xlsx_button").click()

    # And the user selects "1mb-sheet.xlsx"
    browser.find_element_by_id("file_input").send_keys("path/to/1mb-sheet.xlsx")

    # Then the upload completes
    assert browser.find_element_by_id("upload_success_message").is_displayed()

    # And the table "Uploaded Files" contains a cell with "1mb-sheet.xlsx"
    assert "1mb-sheet.xlsx" in uploaded_files_table.text

    # And the table "Uploaded Files" contains a cell with "500kb-sheet.xlsx"
    assert "500kb-sheet.xlsx" in uploaded_files_table.text
